local example_data = require("example.example_data")

local start_time = nil

local function measure_time(times)
    if start_time == nil then
        start_time = socket.gettime()
        return
    end
    local end_time = socket.gettime()
    print("...time", string.format("%.03f ns", (end_time - start_time) * 1000000 / times))
    start_time = end_time
end

function init(self)
    print("zstd version", zstd.version())

    print("TEST IN-MEMORY COMPRESS/DECOMPRESS")

    local str = example_data
    local compressed = zstd.compress(str)
    local decompressed = zstd.decompress(compressed)
    assert(str == decompressed)

    print("TEST UNKNOWN FRAME SIZE DECOMPRESS")

    local zst_contents = zstd.decompress(sys.load_resource("/example/test.tar.zst"))
    assert(#zst_contents > 0)

    print("BENCHMARK")

    print("original", #str)
    measure_time()
    local size = 0
    for i = 1, 20000 do
        size = #zstd.compress(str)
    end
    print("compressed (zstd default)", size)
    measure_time(20000)
    for i = 1, 500 do
        size = #zstd.compress(str, 22)
    end
    print("compressed (zstd level 22)", size)
    measure_time(500)
    for i = 1, 20000 do
        size = #zlib.deflate(str)
    end
    print("compressed (zlib)", size)
    measure_time(20000)

    print("DONE")

    if sys.get_config_string("bootstrap.exit_immediately") then
        sys.exit(0)
    end
end

function final(self)
   
end

function update(self, dt)
    -- Add update code here
    -- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Remove this function if not needed
end

function on_input(self, action_id, action)
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
